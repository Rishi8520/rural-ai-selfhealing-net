tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  title: "Rural Network Fiber Cut Emergency Healing Workflow"
  description: "TOSCA template for automated fiber cut detection and emergency rerouting"
  author: "Nokia Build-a-thon AI Self-Healing Network"
  version: "1.0.0"
  created: "2024-12-08"
  template_type: "emergency_healing_workflow"
  use_case: "fiber_infrastructure_failure"
  criticality: "HIGH"

imports:
  - ../node_types/rural_network_node_types.yaml
  - ../node_types/healing_interface_types.yaml

topology_template:
  inputs:
    node_a_id:
      type: string
      description: "First node of the severed fiber link"
      constraints:
        - pattern: "node_[0-4][0-9]"
      required: true
      
    node_b_id:
      type: string
      description: "Second node of the severed fiber link"
      constraints:
        - pattern: "node_[0-4][0-9]"
      required: true
      
    fiber_link_id:
      type: string
      description: "Unique identifier of the severed fiber link"
      required: true
      
    alternative_path_nodes:
      type: list
      description: "List of nodes that can form alternative routing paths"
      entry_schema:
        type: string
        constraints:
          - pattern: "node_[0-4][0-9]"
      required: true
      
    failure_detection_time:
      type: string
      description: "Timestamp when fiber cut was detected"
      required: true
      
    affected_services:
      type: list
      description: "List of services affected by the fiber cut"
      entry_schema:
        type: string
      default: []
      
    emergency_priority:
      type: integer
      description: "Emergency healing priority (1=critical, 2=high, 3=medium)"
      constraints:
        - in_range: [1, 3]
      default: 1
      
    max_emergency_time:
      type: integer
      description: "Maximum time allowed for emergency restoration (seconds)"
      default: 120  # 2 minutes for emergency response
      constraints:
        - greater_than: 30
        
    backup_capacity_required:
      type: float
      description: "Percentage of original capacity required in backup route"
      constraints:
        - in_range: [0.5, 1.0]
      default: 0.8
      
    service_provider_notification:
      type: boolean
      description: "Whether to notify service provider immediately"
      default: true

  node_templates:
    # Emergency Routing Service
    emergency_routing_service:
      type: rural_network.EmergencyRoutingService
      properties:
        failed_link:
          source_node: { get_input: node_a_id }
          target_node: { get_input: node_b_id }
          link_id: { get_input: fiber_link_id }
          failure_time: { get_input: failure_detection_time }
        alternative_path: { get_input: alternative_path_nodes }
        routing_algorithm: "shortest_path_first"
        load_distribution: "weighted_round_robin"
        failover_mode: "immediate"
        capacity_requirement: { get_input: backup_capacity_required }
        qos_preservation: true
        emergency_mode: true
      attributes:
        emergency_routes: []
        route_establishment_time: 0
        capacity_utilization: 0.0
        route_stability: false
        convergence_achieved: false
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/emergency_routing_setup.yml
            inputs:
              source_node: { get_input: node_a_id }
              target_node: { get_input: node_b_id }
              alternative_nodes: { get_input: alternative_path_nodes }
              emergency_mode: true
              capacity_target: { get_input: backup_capacity_required }
          configure:
            implementation: ../playbooks/configure_emergency_routes.yml
            inputs:
              route_priority: "emergency"
              load_balancing: true
              redundancy_level: 2
          start:
            implementation: ../playbooks/activate_emergency_routing.yml
            inputs:
              validation_required: true
              performance_monitoring: true
          delete:
            implementation: ../playbooks/cleanup_emergency_routes.yml

    # Fiber Infrastructure Assessment Service
    fiber_assessment_service:
      type: rural_network.FiberAssessmentService
      properties:
        failed_link_id: { get_input: fiber_link_id }
        assessment_type: "emergency_evaluation"
        damage_analysis_required: true
        repair_estimation_required: true
        alternative_assessment: true
      attributes:
        damage_severity: ""
        estimated_repair_time: 0
        repair_feasibility: ""
        alternative_options: []
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/assess_fiber_damage.yml
            inputs:
              link_id: { get_input: fiber_link_id }
              node_a: { get_input: node_a_id }
              node_b: { get_input: node_b_id }
              assessment_priority: "emergency"
          start:
            implementation: ../playbooks/analyze_repair_options.yml

    # Service Provider Notification Service
    service_provider_notification:
      type: rural_network.ServiceProviderNotification
      properties:
        incident_type: "fiber_cut"
        severity: "HIGH"
        affected_infrastructure:
          link_id: { get_input: fiber_link_id }
          node_a: { get_input: node_a_id }
          node_b: { get_input: node_b_id }
          affected_services: { get_input: affected_services }
        priority: { get_input: emergency_priority }
        auto_escalation: true
        notification_channels: ["email", "sms", "api", "dashboard"]
        sla_impact_assessment: true
      attributes:
        notification_sent: false
        escalation_triggered: false
        sla_breach_risk: ""
        estimated_impact_duration: 0
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/notify_service_provider.yml
            inputs:
              incident_id: { concat: ["FIBER_CUT_", { get_input: fiber_link_id }, "_", { get_property: [SELF, incident_timestamp] }] }
              priority_level: { get_input: emergency_priority }
              immediate_notification: { get_input: service_provider_notification }
          configure:
            implementation: ../playbooks/setup_incident_tracking.yml
          start:
            implementation: ../playbooks/initiate_repair_coordination.yml

    # Network Isolation Service
    network_isolation_service:
      type: rural_network.NetworkIsolationService
      properties:
        isolation_scope:
          failed_link: { get_input: fiber_link_id }
          affected_nodes: [{ get_input: node_a_id }, { get_input: node_b_id }]
        isolation_strategy: "graceful_degradation"
        service_preservation: true
        traffic_migration: true
        isolation_timeout: 30  # seconds
      attributes:
        isolation_completed: false
        services_migrated: 0
        traffic_loss_percentage: 0.0
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/initiate_network_isolation.yml
          start:
            implementation: ../playbooks/execute_graceful_isolation.yml

    # Emergency Coordination Service
    emergency_coordinator:
      type: rural_network.EmergencyCoordinatorService
      properties:
        emergency_workflow_id: { concat: ["fiber_emergency_", { get_input: fiber_link_id }, "_", { get_property: [SELF, emergency_timestamp] }] }
        emergency_type: "fiber_infrastructure_failure"
        coordination_timeout: { get_input: max_emergency_time }
        escalation_enabled: true
        real_time_monitoring: true
        success_criteria:
          connectivity_restored: true
          service_availability: { get_input: backup_capacity_required }
          performance_threshold: 0.7  # Lower threshold for emergency
          max_response_time: { get_input: max_emergency_time }
      attributes:
        emergency_timestamp: ""
        coordination_status: "initializing"
        response_time: 0
        restoration_effectiveness: 0.0
        services_restored: 0
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/initialize_emergency_response.yml
          start:
            implementation: ../playbooks/coordinate_emergency_healing.yml
          delete:
            implementation: ../playbooks/finalize_emergency_response.yml

    # Performance Monitoring Service
    emergency_monitoring_service:
      type: rural_network.EmergencyMonitoringService
      properties:
        monitoring_scope:
          emergency_routes: { get_attribute: [emergency_routing_service, emergency_routes] }
          affected_nodes: [{ get_input: node_a_id }, { get_input: node_b_id }]
          alternative_nodes: { get_input: alternative_path_nodes }
        monitoring_interval: 2  # seconds (high frequency for emergency)
        alert_thresholds:
          packet_loss_max: 0.1  # Higher tolerance in emergency
          latency_max: 200.0     # Higher tolerance in emergency
          jitter_max: 50.0
          availability_min: { get_input: backup_capacity_required }
      interfaces:
        Standard:
          create:
            implementation: ../playbooks/setup_emergency_monitoring.yml
          start:
            implementation: ../playbooks/start_emergency_monitoring.yml
          delete:
            implementation: ../playbooks/cleanup_emergency_monitoring.yml

  # Relationship Templates
  relationships:
    - type: rural_network.EmergencyCoordinatedBy
      source: emergency_routing_service
      target: emergency_coordinator
      
    - type: rural_network.EmergencyCoordinatedBy
      source: network_isolation_service
      target: emergency_coordinator
      
    - type: rural_network.NotificationTriggeredBy
      source: service_provider_notification
      target: emergency_coordinator
      
    - type: rural_network.MonitoredBy
      source: emergency_routing_service
      target: emergency_monitoring_service
      
    - type: rural_network.AssessedBy
      source: emergency_routing_service
      target: fiber_assessment_service

  # Emergency Healing Workflow
  workflows:
    fiber_cut_emergency_healing:
      description: "Rapid emergency response workflow for fiber cut incidents"
      metadata:
        workflow_type: "emergency_healing"
        estimated_duration: 90  # seconds
        success_rate: 0.90
        rollback_supported: false  # Emergency mode - no rollback
        criticality: "HIGH"
      inputs:
        emergency_timeout:
          type: integer
          default: { get_input: max_emergency_time }
        capacity_target:
          type: float
          default: { get_input: backup_capacity_required }
      steps:
        # Step 1: Emergency Response Initialization (0-5 seconds)
        initialize_emergency_response:
          target: emergency_coordinator
          activities:
            - call_operation: Standard.create
            - set_state: created
          on_success:
            - parallel_emergency_assessment
          on_failure:
            - escalate_to_manual_emergency

        # Step 2: Parallel Emergency Assessment (5-15 seconds)
        parallel_emergency_assessment:
          target: fiber_assessment_service
          activities:
            - call_operation: Standard.create
            - call_operation: Standard.start
            - set_state: started
          parallel:
            - initiate_service_provider_notification
            - setup_emergency_monitoring
          on_success:
            - execute_network_isolation
          on_failure:
            - attempt_blind_rerouting

        # Step 3: Service Provider Notification (Parallel)
        initiate_service_provider_notification:
          target: service_provider_notification
          activities:
            - call_operation: Standard.create
            - call_operation: Standard.configure
            - call_operation: Standard.start
            - set_state: started

        # Step 4: Emergency Monitoring Setup (Parallel)
        setup_emergency_monitoring:
          target: emergency_monitoring_service
          activities:
            - call_operation: Standard.create
            - call_operation: Standard.start
            - set_state: started

        # Step 5: Network Isolation (15-25 seconds)
        execute_network_isolation:
          target: network_isolation_service
          activities:
            - call_operation: Standard.create
            - call_operation: Standard.start
            - set_state: started
          on_success:
            - establish_emergency_routing
          on_failure:
            - attempt_forced_isolation

        # Step 6: Emergency Routing Establishment (25-45 seconds)
        establish_emergency_routing:
          target: emergency_routing_service
          activities:
            - call_operation: Standard.create
              inputs:
                urgency: "critical"
                bypass_optimization: true
            - set_state: created
          on_success:
            - configure_emergency_routes
          on_failure:
            - attempt_degraded_routing

        # Step 7: Configure Emergency Routes (45-60 seconds)
        configure_emergency_routes:
          target: emergency_routing_service
          activities:
            - call_operation: Standard.configure
              inputs:
                route_optimization: "minimal"
                convergence_priority: "speed"
            - set_state: configured
          on_success:
            - activate_emergency_routes
          on_failure:
            - fallback_to_basic_routing

        # Step 8: Activate Emergency Routes (60-75 seconds)
        activate_emergency_routes:
          target: emergency_routing_service
          activities:
            - call_operation: Standard.start
              inputs:
                validation_timeout: 15
                performance_validation: false  # Skip for speed
            - set_state: started
          on_success:
            - validate_emergency_restoration
          on_failure:
            - attempt_route_recovery

        # Step 9: Validate Emergency Restoration (75-90 seconds)
        validate_emergency_restoration:
          target: emergency_coordinator
          activities:
            - call_operation: Standard.start
              inputs:
                validation_duration: 15
                success_criteria:
                  basic_connectivity: true
                  minimum_capacity: { get_input: backup_capacity_required }
          on_success:
            - finalize_emergency_response
          on_failure:
            - escalate_emergency_failure

        # Step 10: Finalize Emergency Response
        finalize_emergency_response:
          target: emergency_coordinator
          activities:
            - call_operation: Standard.delete
              inputs:
                preserve_emergency_routes: true
                generate_incident_report: true
                schedule_permanent_repair: true
            - set_state: deleted

  # Emergency Outputs
  outputs:
    emergency_workflow_id:
      description: "Unique emergency workflow identifier"
      value: { get_attribute: [emergency_coordinator, emergency_workflow_id] }
      
    emergency_response_time:
      description: "Total emergency response time in seconds"
      value: { get_attribute: [emergency_coordinator, response_time] }
      
    emergency_routes_established:
      description: "List of emergency routes successfully established"
      value: { get_attribute: [emergency_routing_service, emergency_routes] }
      
    service_restoration_percentage:
      description: "Percentage of services successfully restored"
      value: { get_attribute: [emergency_coordinator, services_restored] }
      
    fiber_damage_assessment:
      description: "Assessment of fiber damage and repair requirements"
      value: { get_attribute: [fiber_assessment_service, damage_severity] }
      
    estimated_permanent_repair_time:
      description: "Estimated time for permanent fiber repair (hours)"
      value: { get_attribute: [fiber_assessment_service, estimated_repair_time] }
      
    emergency_effectiveness:
      description: "Effectiveness of emergency response (0.0-1.0)"
      value: { get_attribute: [emergency_coordinator, restoration_effectiveness] }
      
    sla_impact_assessment:
      description: "Assessment of SLA impact and breach risk"
      value: { get_attribute: [service_provider_notification, sla_breach_risk] }
      
    incident_tracking_id:
      description: "Service provider incident tracking identifier"
      value: { get_attribute: [service_provider_notification, incident_id] }

  # Emergency Policies
  policies:
    - emergency_timeout_policy:
        type: rural_network.EmergencyTimeoutPolicy
        targets: [fiber_cut_emergency_healing]
        properties:
          timeout: { get_input: max_emergency_time }
          action: "escalate"
          escalation_target: "manual_intervention"
          
    - emergency_resource_priority:
        type: rural_network.ResourcePriorityPolicy
        targets: [emergency_routing_service, emergency_coordinator]
        properties:
          priority: "critical"
          resource_preemption: true
          cpu_priority: "highest"
          
    - service_continuity_policy:
        type: rural_network.ServiceContinuityPolicy
        targets: [emergency_routing_service]
        properties:
          minimum_service_level: { get_input: backup_capacity_required }
          degradation_acceptable: true
          temporary_solution: true

  # Emergency Groups
  groups:
    emergency_response_team:
      type: rural_network.EmergencyResponseGroup
      members: [emergency_coordinator, emergency_routing_service, network_isolation_service]
      properties:
        coordination_mode: "emergency"
        parallel_execution: true
        failure_tolerance: "low"
        
    notification_and_monitoring:
      type: rural_network.SupportServicesGroup
      members: [service_provider_notification, emergency_monitoring_service, fiber_assessment_service]
      properties:
        execution_mode: "parallel"
        criticality: "support"